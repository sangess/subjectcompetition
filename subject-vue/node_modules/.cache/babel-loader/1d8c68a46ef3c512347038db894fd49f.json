{"remainingRequest":"D:\\IDEA_workspace2\\subject-vue\\node_modules\\thread-loader\\dist\\cjs.js!D:\\IDEA_workspace2\\subject-vue\\node_modules\\babel-loader\\lib\\index.js!D:\\IDEA_workspace2\\subject-vue\\src\\assets\\js\\utils.js","dependencies":[{"path":"D:\\IDEA_workspace2\\subject-vue\\src\\assets\\js\\utils.js","mtime":1619018171723},{"path":"D:\\IDEA_workspace2\\subject-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IDEA_workspace2\\subject-vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IDEA_workspace2\\subject-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.string.pad-start\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\n/**\r\n * 日期时间的格式化 \r\n * 用法：\r\n * let date = new Date();\r\n * dateFormat(\"YYYY-mm-dd HH:MM\", date);\r\n * @param {*} fmt 指定日期格式化\r\n * @param {*} date 日期\r\n */\nfunction dateFormat(fmt, date) {\n  var ret;\n  var opt = {\n    \"Y+\": date.getFullYear().toString(),\n    // 年\n    \"m+\": (date.getMonth() + 1).toString(),\n    // 月\n    \"d+\": date.getDate().toString(),\n    // 日\n    \"H+\": date.getHours().toString(),\n    // 时\n    \"M+\": date.getMinutes().toString(),\n    // 分\n    \"S+\": date.getSeconds().toString() // 秒\n    // 有其他格式化字符需求可以继续添加，必须转化成字符串\n\n  };\n\n  for (var k in opt) {\n    ret = new RegExp(\"(\" + k + \")\").exec(fmt);\n\n    if (ret) {\n      fmt = fmt.replace(ret[1], ret[1].length == 1 ? opt[k] : opt[k].padStart(ret[1].length, \"0\"));\n    }\n\n    ;\n  }\n\n  ;\n  return fmt;\n}\n\nfunction formatDate(date, fmt) {\n  if (/(y+)/.test(fmt)) {\n    fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));\n  }\n\n  var o = {\n    'M+': date.getMonth() + 1,\n    'd+': date.getDate(),\n    'h+': date.getHours(),\n    'm+': date.getMinutes(),\n    's+': date.getSeconds()\n  };\n\n  for (var k in o) {\n    if (new RegExp(\"(\".concat(k, \")\")).test(fmt)) {\n      var str = o[k] + '';\n      fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? str : padLeftZero(str));\n    }\n  }\n\n  return fmt;\n}\n\nfunction padLeftZero(str) {\n  return ('00' + str).substr(str.length);\n}\n\nimport FileSaver from \"file-saver\";\nimport XLSX from \"xlsx\";\n/**\r\n * 导出Excel表格\r\n * @param {*} tableDOM  table节点（ID）\r\n * @param {*} excelName  导出的excel名称\r\n */\n\nfunction exportExcel(tableDOM, excelName) {\n  /* generate workbook object from table */\n  var wb = XLSX.utils.table_to_book(document.querySelector(\"#\" + tableDOM));\n  /* get binary string as output */\n\n  var wbout = XLSX.write(wb, {\n    bookType: \"xlsx\",\n    bookSST: true,\n    type: \"array\"\n  });\n\n  try {\n    FileSaver.saveAs(new Blob([wbout], {\n      type: \"application/octet-stream\"\n    }), excelName + \".xlsx\");\n  } catch (e) {\n    if (typeof console !== \"undefined\") console.log(e, wbout);\n  }\n\n  return wbout;\n}\n/**\r\n * 这个sleep()在执行的时候是“block”程序的继续执行的。它不是同步的。如果想让它同步执行，不妨碍执行之后的代码，我们可以使用 async/await 关键字。\r\n * 使用方法：\r\n * (async function() {\r\n * console.log('Do some thing, ' + new Date());\r\n * await sleep(3000);\r\n * console.log('Do other things, ' + new Date());\r\n * })();\r\n * @param {*} time 毫秒\r\n */\n\n\nfunction sleep(time) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, time);\n  });\n}\n\nexport { //很关键\ndateFormat, exportExcel, sleep, formatDate, padLeftZero };",{"version":3,"sources":["D:/IDEA_workspace2/subject-vue/src/assets/js/utils.js"],"names":["dateFormat","fmt","date","ret","opt","getFullYear","toString","getMonth","getDate","getHours","getMinutes","getSeconds","k","RegExp","exec","replace","length","padStart","formatDate","test","$1","substr","o","str","padLeftZero","FileSaver","XLSX","exportExcel","tableDOM","excelName","wb","utils","table_to_book","document","querySelector","wbout","write","bookType","bookSST","type","saveAs","Blob","e","console","log","sleep","time","Promise","resolve","setTimeout"],"mappings":"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","sourcesContent":["\r\n/**\r\n * 日期时间的格式化 \r\n * 用法：\r\n * let date = new Date();\r\n * dateFormat(\"YYYY-mm-dd HH:MM\", date);\r\n * @param {*} fmt 指定日期格式化\r\n * @param {*} date 日期\r\n */\r\nfunction dateFormat(fmt, date) {\r\n    let ret;\r\n    const opt = {\r\n        \"Y+\": date.getFullYear().toString(),        // 年\r\n        \"m+\": (date.getMonth() + 1).toString(),     // 月\r\n        \"d+\": date.getDate().toString(),            // 日\r\n        \"H+\": date.getHours().toString(),           // 时\r\n        \"M+\": date.getMinutes().toString(),         // 分\r\n        \"S+\": date.getSeconds().toString()          // 秒\r\n        // 有其他格式化字符需求可以继续添加，必须转化成字符串\r\n    };\r\n    for (let k in opt) {\r\n        ret = new RegExp(\"(\" + k + \")\").exec(fmt);\r\n        if (ret) {\r\n            fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, \"0\")))\r\n        };\r\n    };\r\n    return fmt;\r\n}\r\n\r\nfunction formatDate (date, fmt) {\r\n    if (/(y+)/.test(fmt)) {\r\n        fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length))\r\n    }\r\n    let o = {\r\n        'M+': date.getMonth() + 1,\r\n        'd+': date.getDate(),\r\n        'h+': date.getHours(),\r\n        'm+': date.getMinutes(),\r\n        's+': date.getSeconds()\r\n    }\r\n    for (let k in o) {\r\n        if (new RegExp(`(${k})`).test(fmt)) {\r\n            let str = o[k] + ''\r\n            fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? str : padLeftZero(str))\r\n        }\r\n    }\r\n    return fmt\r\n}\r\n\r\nfunction padLeftZero (str) {\r\n    return ('00' + str).substr(str.length)\r\n}\r\n\r\n\r\nimport FileSaver from \"file-saver\";\r\nimport XLSX from \"xlsx\";\r\n/**\r\n * 导出Excel表格\r\n * @param {*} tableDOM  table节点（ID）\r\n * @param {*} excelName  导出的excel名称\r\n */\r\nfunction exportExcel(tableDOM, excelName) {\r\n    /* generate workbook object from table */\r\n    var wb = XLSX.utils.table_to_book(document.querySelector(\"#\" + tableDOM));\r\n    /* get binary string as output */\r\n    var wbout = XLSX.write(wb, {\r\n        bookType: \"xlsx\",\r\n        bookSST: true,\r\n        type: \"array\"\r\n    });\r\n    try {\r\n        FileSaver.saveAs(\r\n            new Blob([wbout], { type: \"application/octet-stream\" }),\r\n            excelName + \".xlsx\"\r\n        );\r\n    } catch (e) {\r\n        if (typeof console !== \"undefined\") console.log(e, wbout);\r\n    }\r\n    return wbout;\r\n}\r\n\r\n\r\n\r\n/**\r\n * 这个sleep()在执行的时候是“block”程序的继续执行的。它不是同步的。如果想让它同步执行，不妨碍执行之后的代码，我们可以使用 async/await 关键字。\r\n * 使用方法：\r\n * (async function() {\r\n * console.log('Do some thing, ' + new Date());\r\n * await sleep(3000);\r\n * console.log('Do other things, ' + new Date());\r\n * })();\r\n * @param {*} time 毫秒\r\n */\r\nfunction sleep(time) {\r\n    return new Promise((resolve) => setTimeout(resolve, time));\r\n}\r\n\r\nexport { //很关键\r\n    dateFormat,\r\n    exportExcel,\r\n    sleep,\r\n    formatDate,\r\n    padLeftZero\r\n}\r\n"]}]}